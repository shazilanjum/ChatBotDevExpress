@page "/chat"

@using DemoChatApp.Contracts
@using DemoChatApp.Models.Enum
@using DemoChatApp.ViewModels
@using DevExpress.Blazor
@using DevExpress.Blazor.Internal
@using DevExpress.Blazor.Legacy
@using System.Collections.ObjectModel
@using DevExpress.XtraDiagram.Utils
@using Markdig
@using Microsoft.AspNetCore.Components.Web
@using static DevExpress.XtraPrinting.Native.ExportOptionsPropertiesNames
@inject ChatViewModel ViewModel

<head>
    @*...*@
    <link href=@AppendVersion("_content/DevExpress.Blazor.Themes/fluent-light.min.css") rel="stylesheet" />
    <link href=@AppendVersion("css/site.css") rel="stylesheet" />
    @*...*@
</head>



<DxSplitter CssClass="border" Height="100vh">
    <Panes>
        <!-- Sidebar Pane -->
        <DxSplitterPane Size="20%" MinSize="200px">
            <div style="margin-bottom: 15px;">
                <DxButton Click="ViewModel.StartNewChat" Text="New Chat" CssClass="w-full" />
            </div>
            <DxListBox ShowSearchBox="true" Data="@ViewModel.Chats" SelectedItemsChanged="@(async (IEnumerable<ChatListViewModel> values) => await ViewModel.OnClickChatChange(values))" @bind-Values="ViewModel.SelectedChatSelection" TextFieldName="@nameof(ChatListViewModel.ChatTitle)" Style="height: 100%; width: 100%;">
                <ItemTemplate>
                <div class="list-item">
                <span>@context.ChatTitle</span>
                <DxButton Click="async ()=>await ViewModel.DeleteChat(context.ChatID)" RenderStyle="ButtonRenderStyle.Danger"
                                         RenderStyleMode="ButtonRenderStyleMode.Outline"
                                         Text="Delete" />
                </div>
                </ItemTemplate>
            </DxListBox>
        </DxSplitterPane>
        <DxSplitterPane CssClass="card-dark">
            <DevExpress.Blazor.Internal.DxCard>
                <DevExpress.Blazor.Internal.DxCardHeader >
                    <DxGridLayout ColumnSpacing="8px" RowSpacing="8px" >
                        <Rows>
                            <DxGridLayoutRow Height="auto" />
                        </Rows>
                        <Columns>
                            <DxGridLayoutColumn Width="2fr" />
                            <DxGridLayoutColumn Width="60%" />
                            <DxGridLayoutColumn />
                        </Columns>

                        <Items>
                            <DxGridLayoutItem Row="1" Column="0">
                                <Template>
                                    <DxComboBox Data="ViewModel.OpenAIModelsList" @bind-Value="ViewModel.ChatModelSettingsViewModel.SelectedModel" ShowDropDownButton="false" NullText="Models">
                                        <Buttons>
                                            <DxComboBoxDropDownButton Position="EditorButtonPosition.Right" />
                                        </Buttons>
                                    </DxComboBox>
                                </Template>
                            </DxGridLayoutItem>
                            <DxGridLayoutItem Row="0" Column="1" CssClass="card-dark">
                                <Template>
                                    <DxButton Text="Parameters" Click="@(() => PopupVisible = true)" />
                                    <DxPopup @bind-Visible="@PopupVisible"
                                             HeaderText="Model Parameter Setting"
                                             ShowFooter="true">
                                        <BodyTemplate Context="PopupContext">
                                            <DxFormLayout style="padding: 1rem;">

                                                <DxFormLayoutItem Caption="Temperature:" ColSpanMd="12">
                                                    <div class="temperature-container">
                                                        <!-- Range Slider -->
                                                        <input type="range" min="0" max="1" step="0.1"
                                                               @bind="TemperatureValue"
                                                               @bind:event="oninput"
                                                               class="custom-slider" />

                                                        <!-- Spin Edit -->
                                                        <DxSpinEdit Value="@TemperatureValue"
                                                                    ValueChanged="@((decimal v) => OnTemperatureChanged(v))"
                                                                    Increment="0.1M"
                                                                    MinValue="0M"
                                                                    MaxValue="1M"
                                                                    ShowSpinButtons="true" />
                                                    </div>
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem Caption="TopP:" ColSpanMd="12">
                                                    <div class="temperature-container">
                                                        <!-- Range Slider -->
                                                        <input type="range" min="0" max="1" step="0.1"
                                                               @bind="TopPValue"
                                                               @bind:event="oninput"
                                                               class="custom-slider" />

                                                        <!-- Spin Edit -->
                                                        <DxSpinEdit Value="@TopPValue"
                                                                    ValueChanged="@((decimal v) => OnTopPChanged(v))"
                                                                    Increment="0.1M"
                                                                    MinValue="0M"
                                                                    MaxValue="1M"
                                                                    ShowSpinButtons="true" />
                                                    </div>
                                                </DxFormLayoutItem>
                                            </DxFormLayout>
                                        </BodyTemplate>
                                        <FooterContentTemplate>
                                            <DxButton RenderStyle="ButtonRenderStyle.Primary" Text="OK"
                                                      Click="@context.CloseCallback" />
                                        </FooterContentTemplate>
                                    </DxPopup>


                                </Template>
                            </DxGridLayoutItem>
                        </Items>
                    </DxGridLayout>

                </DevExpress.Blazor.Internal.DxCardHeader>
                <div class="chat-body">
                    <DevExpress.Blazor.Internal.DxCardBody CssClass="full-height card-dark">

                        @if (ViewModel.SelectedChat != null)
                        {
                            <div class="chat-box">
                                @foreach (var message in ViewModel.SelectedChat.ChatHistory)
                                {  
                                    <div class="chat-message">
                                            <DevExpress.Blazor.Internal.DxCard>
                                                <DevExpress.Blazor.Internal.DxCardBody CssClass="dark">
                                                    <div>
                                                        <div>@(new MarkupString(Markdown.ToHtml(message.Message, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build())))</div>
                                                    </div>
                                                </DevExpress.Blazor.Internal.DxCardBody>
                                            </DevExpress.Blazor.Internal.DxCard>
                                        </div>

                                }
                            </div>
                        }
                        
                    </DevExpress.Blazor.Internal.DxCardBody>
                </div>
  
        </DevExpress.Blazor.Internal.DxCard>
            <div style="margin-top: 20px;">
                <DevExpress.Blazor.Internal.DxCard>
                    <DevExpress.Blazor.Internal.DxCardHeader>
                        <DxMemo @bind-Text="ViewModel.UserMessage"
                            NullText="Ask me something..." SizeMode="SizeMode.Large" ResizeMode="MemoResizeMode.Disabled" Style="height: 100px;"></DxMemo>
                        <DxButton style="margin-top: 10px;" Click="ViewModel.SendMessage" Text="Send" CssClass="mt-2" />

                    </DevExpress.Blazor.Internal.DxCardHeader>
                </DevExpress.Blazor.Internal.DxCard>
            </div>
        </DxSplitterPane>
    </Panes>
</DxSplitter>


<style >
   

</style>


@code {

    private string AppendVersion(string path) => $"{path}?v={typeof(DevExpress.Blazor.ResourcesConfigurator).Assembly.GetName().Version}";

    private double[] sliderValue;
    private List<ChatMessage> Messages = new();
    private string UserMessage { get; set; }

    private string SelectedChat { get; set; }
    IEnumerable<string> Models;

    private bool IsSendEnabled;

    private decimal TemperatureValue { get; set; } = 0.7M; // Default value
    private decimal TopPValue { get; set; } = 0.9M; // Default value

    private double GetDoubleValue(decimal value) => (double)value;
    private decimal GetDecimalValue(double value) => (decimal)value;



    private void OnTemperatureChanged(decimal value)
    {
        TemperatureValue = value;
    }

    private void OnTopPChanged(decimal value)
    {
        TopPValue = value;
    }


    protected override async Task OnInitializedAsync()
    {
        InitializeUIComponents();

        await ViewModel.LoadChats();
    }


    Dictionary<string, int> modelSetting = new Dictionary<string, int>
    {
        { "max_tokens", 20 },
        { "temperature", (int)(0.7 * 10) }, // Converted to integer
        { "top_p", (int)(0.9 * 10) } // Converted to integer
    };

    string Name { get; set; } = "Nancy Davolio";
    DateTime BirthDate { get; set; } = DateTime.Now.AddYears(-20);
    string Email { get; set; } = "NancyDavolio@sample.com";

    private string TextValue { get; set; } = "End users cannot change the Memo value";

    private string Value = null;
    IEnumerable<string> Values { get; set; }

    private bool IsDrawerOpen { get; set; } = false;

    private void OpenDrawer()
    {
        IsDrawerOpen = true;
    }

    private void CloseDrawer()
    {
        IsDrawerOpen = false;
    }
    Dictionary<string, object> GetCloseInfoButtonAttributes()
    {
        return new Dictionary<string, object> {
            { A11yAriaAttributeUtils.AriaLabel, "Close Info Drawer" }
        };
    }
    private void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(UserMessage))
        {
            Messages.Add(new ChatMessage { Content = UserMessage, IsUser = true });
            Messages.Add(new ChatMessage { Content = "AI Response here...", IsUser = false });
            UserMessage = string.Empty;
        }
    }

    private void StartNewChat()
    {
        Messages.Clear();
        SelectedChat = null;
    }

    private class ChatMessage
    {
        public string Content { get; set; }
        public bool IsUser { get; set; }
    }

    //OpenAIModels ModelValue { get; set; }

    private List<Setting> Data = new()
    {
        new Setting { ID = 1, MaxTokens = 24, Temperature = 0.7 },
    };

    private Setting SettingValue { get; set; }

    public class Setting
    {
        public int ID { get; set; }
        public int MaxTokens { get; set; }
        public double Temperature { get; set; }
    }

    bool PopupVisible { get; set; } = false;


    public void InitializeUIComponents()
    {
        sliderValue = new List<double> { 0.5,0.5}.ToArray();

        Models = OpenAIModels.OpenAIModelsMapping.Values.ToList();
    }



}